import { NextRequest, NextResponse } from 'next/server'
import { getSupabaseAdmin } from '../../../../../src/lib/supabase'

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üîÑ API: Reversing payment for account:', params.id);
    
    const supabase = getSupabaseAdmin()
    if (!supabase) {
      return NextResponse.json(
        { success: false, error: 'Supabase client not available' },
        { status: 500 }
      )
    }

    // Tentar usar fun√ß√£o SQL transacional primeiro
    const { data: result, error: rpcError } = await supabase.rpc(
      'reverse_account_payment',
      { p_account_id: params.id }
    )

    if (!rpcError) {
      console.log('‚úÖ Pagamento estornado com transa√ß√£o')
      return NextResponse.json({
        success: true,
        data: result,
        message: 'Pagamento estornado com sucesso'
      })
    }

    // Se a fun√ß√£o n√£o existir, fazer manualmente
    if (rpcError.message?.includes('function') || rpcError.message?.includes('does not exist')) {
      console.log('üîÑ Processando estorno manualmente...')
      
      // 1. Buscar a conta para verificar se est√° paga
      const { data: account, error: accountError } = await supabase
        .from('accounts_payable')
        .select('*')
        .eq('id', params.id)
        .single()

      if (accountError || !account) {
        console.error('‚ùå Conta n√£o encontrada:', accountError)
        return NextResponse.json(
          { success: false, error: 'Conta n√£o encontrada' },
          { status: 404 }
        )
      }

      if (account.status !== 'paid') {
        console.error('‚ö†Ô∏è Conta n√£o est√° paga, n√£o pode ser estornada')
        return NextResponse.json(
          { success: false, error: 'Conta n√£o est√° paga' },
          { status: 400 }
        )
      }

      // 2. Primeiro, buscar movimenta√ß√µes para debug
      const { data: existingMovements, error: searchError } = await supabase
        .from('cash_movements')
        .select('*')
        .eq('reference_type', 'account_payment')
        .eq('reference_id', params.id)

      console.log('üîç Movimenta√ß√µes encontradas para deletar:', {
        count: existingMovements?.length || 0,
        movements: existingMovements,
        searchError
      })

      // 3. Deletar movimenta√ß√£o financeira relacionada
      const { data: deletedData, error: deleteMovementError } = await supabase
        .from('cash_movements')
        .delete()
        .eq('reference_type', 'account_payment')
        .eq('reference_id', params.id)
        .select()

      console.log('üóëÔ∏è Resultado da dele√ß√£o:', {
        deletedData,
        deletedCount: deletedData?.length || 0,
        deleteMovementError
      })

      if (deleteMovementError) {
        console.error('‚ö†Ô∏è Erro ao deletar movimenta√ß√£o:', deleteMovementError)
        // Continuar mesmo se n√£o conseguir deletar a movimenta√ß√£o
      } else {
        console.log(`‚úÖ ${deletedData?.length || 0} movimenta√ß√£o(√µes) financeira(s) deletada(s)`)
      }

      // 4. Reverter status da conta para pending
      const { data: updatedAccount, error: updateError } = await supabase
        .from('accounts_payable')
        .update({
          status: 'pending',
          payment_date: null,
          paid_amount: null,
          financial_account_id: null,
          updated_at: new Date().toISOString()
        })
        .eq('id', params.id)
        .select(`
          *,
          companies_clients_suppliers (
            name,
            type
          )
        `)
        .single()

      if (updateError) {
        console.error('‚ùå Erro ao reverter conta:', updateError)
        return NextResponse.json(
          { success: false, error: 'Erro ao estornar pagamento' },
          { status: 500 }
        )
      }

      console.log('‚úÖ Pagamento estornado com sucesso')
      return NextResponse.json({
        success: true,
        data: updatedAccount,
        message: 'Pagamento estornado com sucesso'
      })
    }

    // Outro erro na fun√ß√£o RPC
    console.error('‚ùå Erro na fun√ß√£o RPC:', rpcError)
    return NextResponse.json(
      { success: false, error: 'Erro ao estornar pagamento' },
      { status: 500 }
    )

  } catch (error) {
    console.error('‚ùå API Error:', error)
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}